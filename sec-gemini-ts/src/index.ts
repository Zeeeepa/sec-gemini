/**
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import HttpClient from "./http";
import InteractiveSession from "./session";
import Streamer from "./streamer";

// manual enums
import {EndPointsEnum, ResponseStatusEnum} from "./enum";

// Rexport autogenerated types and enums
import { User, UserInfo, Message, SessionInput, Role, Usage, State} from "./secgeminitypes";
import { RoleEnum, MessageTypeEnum, ModelNameEnum, StateEnum, UserTypeEnum, MimeTypeEnum } from "./secgeminienums";
// aliases
type Session = SessionInput;

// be sure both of these have the same ip address
// const _default_base_url = "http://127.0.0.1:8000";
// const _default_ws_url = "ws://127.0.0.1:8000";

const _default_base_url = "https://api.secgemini.google";
const _default_ws_url = "wss://ws.secgemini.google";


class P9SDK {
  private user!: User;
  private apiKey!: string;
  private baseURL!: string;
  private websockets!: string;
  private httpClient!: HttpClient;

  private constructor(apiKey: string, baseURL: string = "", websockets: string = "") {
    if (!apiKey) {
      throw new Error("API Key is required");
    }
    this.apiKey = apiKey;
    this.baseURL = baseURL || _default_base_url;
    this.websockets = websockets || _default_ws_url;
    this.httpClient = new HttpClient(this.baseURL, this.apiKey);
  }

  public static async create(apiKey: string, baseURL: string = "", websockets: string = ""): Promise<P9SDK> {
    const sdk = new P9SDK(apiKey, baseURL, websockets);
    const ui = await sdk.httpClient.get<UserInfo>(EndPointsEnum.USER_INFO);
    if (!ui || !ui.user) {
      throw new Error("Failed to get user info");
    }
    sdk.user = ui.user;
    return sdk;
  }

  public getApiKey(): string {
    return this.apiKey;
  }

  public getBaseUrl(): string {
    return this.baseURL;
  }

  public async getUserInfo(): Promise<UserInfo> {
    return this.httpClient.get(EndPointsEnum.USER_INFO);
  }

  public async newSession(ttl: number = 86400, name: string = "",
    description: string = "", logSession: boolean = true): Promise<InteractiveSession> {
    const sess = new InteractiveSession(ModelNameEnum.P9_LATEST_LATEST, this.user,
    this.httpClient, this.websockets, this.apiKey, logSession);
    await sess.register(ttl, name, description);
    return sess;
  }

  public async resumeSession(sessionId: string): Promise<InteractiveSession> {
    const session = new InteractiveSession(ModelNameEnum.P9_LATEST_LATEST, this.user, this.httpClient, this.websockets, this.apiKey);
    const success = await session.resume(sessionId);
    if (!success) {
      throw new Error("Failed to resume session");
    }
    return session;
  }
}

export {
  P9SDK as default,
  InteractiveSession,
  Streamer,
  User,
  UserTypeEnum,
  Usage,
  UserInfo,
  Message,
  MessageTypeEnum,
  ResponseStatusEnum,
  ModelNameEnum,
  StateEnum,
  Session,
  State,
  MimeTypeEnum,
  Role,
  RoleEnum
};