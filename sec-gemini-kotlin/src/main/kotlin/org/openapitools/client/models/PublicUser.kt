/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.PublicUserVendor
import org.openapitools.client.models.UserType

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Only add the fields necessary to show to users.
 *
 * @param id The user ID this session belongs to.
 * @param orgId The organization ID this session belongs to.
 * @param type The type of user.
 * @param neverLog The user session should never be logged.
 * @param canDisableLogging Is user authorized to disable logging.
 * @param keyExpireTime The Unix timestamp (in seconds) of when the key will expire.
 * @param tpm Tokens per minute quota.
 * @param rpm Requests per minute quota.
 * @param allowExperimental Whether the user is allowed to use experimental features.
 * @param vendors The list of vendors the user has access to.
 */


data class PublicUser (

    /* The user ID this session belongs to. */
    @Json(name = "id")
    val id: kotlin.String,

    /* The organization ID this session belongs to. */
    @Json(name = "org_id")
    val orgId: kotlin.String,

    /* The type of user. */
    @Json(name = "type")
    val type: UserType? = null,

    /* The user session should never be logged. */
    @Json(name = "never_log")
    val neverLog: kotlin.Boolean? = false,

    /* Is user authorized to disable logging. */
    @Json(name = "can_disable_logging")
    val canDisableLogging: kotlin.Boolean? = false,

    /* The Unix timestamp (in seconds) of when the key will expire. */
    @Json(name = "key_expire_time")
    val keyExpireTime: kotlin.Int? = 0,

    /* Tokens per minute quota. */
    @Json(name = "tpm")
    val tpm: kotlin.Int? = 0,

    /* Requests per minute quota. */
    @Json(name = "rpm")
    val rpm: kotlin.Int? = 0,

    /* Whether the user is allowed to use experimental features. */
    @Json(name = "allow_experimental")
    val allowExperimental: kotlin.Boolean? = false,

    /* The list of vendors the user has access to. */
    @Json(name = "vendors")
    val vendors: kotlin.collections.List<PublicUserVendor>? = null

) {


}

