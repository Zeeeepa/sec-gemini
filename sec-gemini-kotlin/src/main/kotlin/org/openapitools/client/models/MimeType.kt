/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Completion type
 *
 * Values: textSlashPlain,textSlashMarkdown,textSlashSerializedMinusJson,applicationSlashOctetMinusStream,imageSlashJpeg,imageSlashPng,imageSlashTiff,imageSlashGif,imageSlashSvgPlusXml,imageSlashWebp,imageSlashAvif,audioSlashWav,audioSlashMpeg,audioSlashOgg,videoSlashWebm,videoSlashMp4,textSlashC,textSlashCPlusPlus,textSlashJava,textSlashRust,textSlashGo,textSlashPython,textSlashPhp,textSlashPerl,textSlashRuby,textSlashSwift,textSlashKotlin,textSlashScala,textSlashJavascript,textSlashTypescript,textSlashHtml,textSlashCss,textSlashCsv,textSlashXml,textSlashYaml,textSlashToml,textSlashSql,applicationSlashJson,applicationSlashJsonl,applicationSlashPdf,applicationSlashVndPeriodOpenxmlformatsMinusOfficedocumentPeriodWordprocessingmlPeriodDocument,applicationSlashVndPeriodOpenxmlformatsMinusOfficedocumentPeriodSpreadsheetmlPeriodSheet,applicationSlashVndPeriodOpenxmlformatsMinusOfficedocumentPeriodPresentationmlPeriodPresentation,applicationSlashMsword,applicationSlashVndPeriodMsMinusExcel,applicationSlashVndPeriodMsMinusPowerpoint,applicationSlashRtf,applicationSlashVndPeriodOasisPeriodOpendocumentPeriodText
 */

@JsonClass(generateAdapter = false)
enum class MimeType(val value: kotlin.String) {

    @Json(name = "text/plain")
    textSlashPlain("text/plain"),

    @Json(name = "text/markdown")
    textSlashMarkdown("text/markdown"),

    @Json(name = "text/serialized-json")
    textSlashSerializedMinusJson("text/serialized-json"),

    @Json(name = "application/octet-stream")
    applicationSlashOctetMinusStream("application/octet-stream"),

    @Json(name = "image/jpeg")
    imageSlashJpeg("image/jpeg"),

    @Json(name = "image/png")
    imageSlashPng("image/png"),

    @Json(name = "image/tiff")
    imageSlashTiff("image/tiff"),

    @Json(name = "image/gif")
    imageSlashGif("image/gif"),

    @Json(name = "image/svg+xml")
    imageSlashSvgPlusXml("image/svg+xml"),

    @Json(name = "image/webp")
    imageSlashWebp("image/webp"),

    @Json(name = "image/avif")
    imageSlashAvif("image/avif"),

    @Json(name = "audio/wav")
    audioSlashWav("audio/wav"),

    @Json(name = "audio/mpeg")
    audioSlashMpeg("audio/mpeg"),

    @Json(name = "audio/ogg")
    audioSlashOgg("audio/ogg"),

    @Json(name = "video/webm")
    videoSlashWebm("video/webm"),

    @Json(name = "video/mp4")
    videoSlashMp4("video/mp4"),

    @Json(name = "text/c")
    textSlashC("text/c"),

    @Json(name = "text/c++")
    textSlashCPlusPlus("text/c++"),

    @Json(name = "text/java")
    textSlashJava("text/java"),

    @Json(name = "text/rust")
    textSlashRust("text/rust"),

    @Json(name = "text/go")
    textSlashGo("text/go"),

    @Json(name = "text/python")
    textSlashPython("text/python"),

    @Json(name = "text/php")
    textSlashPhp("text/php"),

    @Json(name = "text/perl")
    textSlashPerl("text/perl"),

    @Json(name = "text/ruby")
    textSlashRuby("text/ruby"),

    @Json(name = "text/swift")
    textSlashSwift("text/swift"),

    @Json(name = "text/kotlin")
    textSlashKotlin("text/kotlin"),

    @Json(name = "text/scala")
    textSlashScala("text/scala"),

    @Json(name = "text/javascript")
    textSlashJavascript("text/javascript"),

    @Json(name = "text/typescript")
    textSlashTypescript("text/typescript"),

    @Json(name = "text/html")
    textSlashHtml("text/html"),

    @Json(name = "text/css")
    textSlashCss("text/css"),

    @Json(name = "text/csv")
    textSlashCsv("text/csv"),

    @Json(name = "text/xml")
    textSlashXml("text/xml"),

    @Json(name = "text/yaml")
    textSlashYaml("text/yaml"),

    @Json(name = "text/toml")
    textSlashToml("text/toml"),

    @Json(name = "text/sql")
    textSlashSql("text/sql"),

    @Json(name = "application/json")
    applicationSlashJson("application/json"),

    @Json(name = "application/jsonl")
    applicationSlashJsonl("application/jsonl"),

    @Json(name = "application/pdf")
    applicationSlashPdf("application/pdf"),

    @Json(name = "application/vnd.openxmlformats-officedocument.wordprocessingml.document")
    applicationSlashVndPeriodOpenxmlformatsMinusOfficedocumentPeriodWordprocessingmlPeriodDocument("application/vnd.openxmlformats-officedocument.wordprocessingml.document"),

    @Json(name = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    applicationSlashVndPeriodOpenxmlformatsMinusOfficedocumentPeriodSpreadsheetmlPeriodSheet("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"),

    @Json(name = "application/vnd.openxmlformats-officedocument.presentationml.presentation")
    applicationSlashVndPeriodOpenxmlformatsMinusOfficedocumentPeriodPresentationmlPeriodPresentation("application/vnd.openxmlformats-officedocument.presentationml.presentation"),

    @Json(name = "application/msword")
    applicationSlashMsword("application/msword"),

    @Json(name = "application/vnd.ms-excel")
    applicationSlashVndPeriodMsMinusExcel("application/vnd.ms-excel"),

    @Json(name = "application/vnd.ms-powerpoint")
    applicationSlashVndPeriodMsMinusPowerpoint("application/vnd.ms-powerpoint"),

    @Json(name = "application/rtf")
    applicationSlashRtf("application/rtf"),

    @Json(name = "application/vnd.oasis.opendocument.text")
    applicationSlashVndPeriodOasisPeriodOpendocumentPeriodText("application/vnd.oasis.opendocument.text");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is MimeType) "$data" else null

        /**
         * Returns a valid [MimeType] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): MimeType? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

