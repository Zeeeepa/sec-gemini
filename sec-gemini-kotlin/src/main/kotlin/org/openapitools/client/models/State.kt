/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * Values: start,query,running_agent,agent_done,coding,code_result,calling_tool,tool_result,generating,answering,thinking,planning,reviewing,understanding,retriving,grounding
 */

@JsonClass(generateAdapter = false)
enum class State(val value: kotlin.String) {

    @Json(name = "start")
    start("start"),

    @Json(name = "query")
    query("query"),

    @Json(name = "running_agent")
    running_agent("running_agent"),

    @Json(name = "agent_done")
    agent_done("agent_done"),

    @Json(name = "coding")
    coding("coding"),

    @Json(name = "code_result")
    code_result("code_result"),

    @Json(name = "calling_tool")
    calling_tool("calling_tool"),

    @Json(name = "tool_result")
    tool_result("tool_result"),

    @Json(name = "generating")
    generating("generating"),

    @Json(name = "answering")
    answering("answering"),

    @Json(name = "thinking")
    thinking("thinking"),

    @Json(name = "planning")
    planning("planning"),

    @Json(name = "reviewing")
    reviewing("reviewing"),

    @Json(name = "understanding")
    understanding("understanding"),

    @Json(name = "retriving")
    retriving("retriving"),

    @Json(name = "grounding")
    grounding("grounding");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is State) "$data" else null

        /**
         * Returns a valid [State] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): State? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

