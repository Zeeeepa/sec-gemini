/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.Message
import org.openapitools.client.models.MessageType
import org.openapitools.client.models.MimeType
import org.openapitools.client.models.Role
import org.openapitools.client.models.State
import org.openapitools.client.models.Usage

class MessageTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of Message
        //val modelInstance = Message()

        // to test the property `messageType` - The type of message - Generation, Tool Call, or Info.
        should("test messageType") {
            // uncomment below to test the property
            //modelInstance.messageType shouldBe ("TODO")
        }

        // to test the property `id` - A unique identifier for the message - uuid4 int.
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `parentId` - The ID of the parent message.
        should("test parentId") {
            // uncomment below to test the property
            //modelInstance.parentId shouldBe ("TODO")
        }

        // to test the property `turn` - The turn identifier is used to group/message are part of the same conversation turn.
        should("test turn") {
            // uncomment below to test the property
            //modelInstance.turn shouldBe ("TODO")
        }

        // to test the property `group` - The Group ID (UUID4) identify messages part of the same generation or action.
        should("test group") {
            // uncomment below to test the property
            //modelInstance.group shouldBe ("TODO")
        }

        // to test the property `actor` - The actor of the message - user or agent.
        should("test actor") {
            // uncomment below to test the property
            //modelInstance.actor shouldBe ("TODO")
        }

        // to test the property `role` - The role of the messages author.
        should("test role") {
            // uncomment below to test the property
            //modelInstance.role shouldBe ("TODO")
        }

        // to test the property `timestamp` - The Unix timestamp (in seconds) of when the message was created.
        should("test timestamp") {
            // uncomment below to test the property
            //modelInstance.timestamp shouldBe ("TODO")
        }

        // to test the property `messageSubType`
        should("test messageSubType") {
            // uncomment below to test the property
            //modelInstance.messageSubType shouldBe ("TODO")
        }

        // to test the property `state` - The state the message belongs to.
        should("test state") {
            // uncomment below to test the property
            //modelInstance.state shouldBe ("TODO")
        }

        // to test the property `content`
        should("test content") {
            // uncomment below to test the property
            //modelInstance.content shouldBe ("TODO")
        }

        // to test the property `mimeType`
        should("test mimeType") {
            // uncomment below to test the property
            //modelInstance.mimeType shouldBe ("TODO")
        }

        // to test the property `statusCode` - The status code of the message. 2xx is Okay, 4xx is a client error, 5xx is a server error.
        should("test statusCode") {
            // uncomment below to test the property
            //modelInstance.statusCode shouldBe ("TODO")
        }

        // to test the property `statusMessage` - Explain status code reason.
        should("test statusMessage") {
            // uncomment below to test the property
            //modelInstance.statusMessage shouldBe ("TODO")
        }

        // to test the property `usage`
        should("test usage") {
            // uncomment below to test the property
            //modelInstance.usage shouldBe ("TODO")
        }

    }
}
